"use client"

import { useCallback, useMemo, useState } from "react"
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card"
import { Separator } from "@/components/ui/separator"
import { Progress } from "@/components/ui/progress"
import { cn } from "@/lib/utils"
import type { DataSource, TableField, TableSection } from "@/lib/types/technical-data"
import {
  calculateDerivedValues,
  overallCompletion,
  sectionCompletion,
  sourceBreakdown,
  mapSectionsToSummaryRows,
} from "@/lib/technical-sheet-data"
import { Button } from "@/components/ui/button"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import {
  AlertCircle,
  Brain,
  CheckCircle2,
  ClipboardList,
  NotebookPen,
  Sparkles,
  UploadCloud,
  FileText,
  Copy,
  Ellipsis,
} from "lucide-react"

interface TechnicalDataSummaryProps {
  sections: TableSection[]
  className?: string
  onFocusSection?: (sectionId: string) => void
  onFocusField?: (sectionId: string, fieldId: string) => void
}

type HighlightField = {
  sectionId: string
  fieldId: string
  label: string
  icon: React.ComponentType<React.SVGProps<SVGSVGElement>>
}

const HIGHLIGHT_FIELDS: HighlightField[] = [
  {
    sectionId: "water-quality",
    fieldId: "ph",
    label: "pH",
    icon: Sparkles,
  },
  {
    sectionId: "water-quality",
    fieldId: "turbidity",
    label: "Turbidity",
    icon: AlertCircle,
  },
  {
    sectionId: "economics-scale",
    fieldId: "water-consumption",
    label: "Water consumption",
    icon: ClipboardList,
  },
  {
    sectionId: "project-context",
    fieldId: "water-source",
    label: "Water source",
    icon: Brain,
  },
]

const SOURCE_META: Record<DataSource, { label: string; description: string; Icon: typeof CheckCircle2; tone: string }> = {
  manual: {
    label: "Manual entry",
    description: "Fields entered directly by engineering.",
    Icon: CheckCircle2,
    tone: "text-sky-600",
  },
  imported: {
    label: "Imported",
    description: "Data from files or integrations.",
    Icon: UploadCloud,
    tone: "text-emerald-600",
  },
  ai: {
    label: "AI-assisted",
    description: "Suggestions generated by AI agents.",
    Icon: Sparkles,
    tone: "text-purple-600",
  },
}

function findField(sections: TableSection[], sectionId: string, fieldId: string): TableField | undefined {
  return sections
    .find((section) => section.id === sectionId)
    ?.fields.find((field) => field.id === fieldId)
}

function formatFieldValue(field?: TableField): string {
  if (!field || field.value === undefined || field.value === null || field.value === "") {
    return "–"
  }

  if (typeof field.value === "number") {
    const formatted = new Intl.NumberFormat("es-MX", {
      maximumFractionDigits: 2,
    }).format(field.value)
    return field.unit ? `${formatted} ${field.unit}` : formatted
  }

  const value = String(field.value)
  return field.unit ? `${value} ${field.unit}` : value
}

export function TechnicalDataSummary({ sections, className, onFocusSection, onFocusField }: TechnicalDataSummaryProps) {
  const completion = useMemo(() => overallCompletion(sections), [sections])

  const sectionStats = useMemo(
    () =>
      sections
        .filter((section) => section.fields.length > 0 && section.id !== "field-notes")
        .map((section) => ({
          section,
          stats: sectionCompletion(section),
        }))
        .sort((a, b) => a.stats.percentage - b.stats.percentage),
    [sections],
  )

  const sourceStats = useMemo(() => sourceBreakdown(sections), [sections])
  const derived = useMemo(() => calculateDerivedValues(sections), [sections])
  const summaryRows = useMemo(() => mapSectionsToSummaryRows(sections), [sections])

  const engineerNotes = useMemo(() => {
    const field = findField(sections, "field-notes", "field-notes")
    return (field?.value as string | undefined)?.trim() ?? ""
  }, [sections])

  const readinessVariant = completion.percentage >= 80 ? "default" : completion.percentage >= 50 ? "secondary" : "outline"
  const readinessLabel = completion.percentage >= 80 ? "Listo para propuesta" : completion.percentage >= 50 ? "Buen avance" : "En progreso"

  const prioritySections = sectionStats.filter(({ stats }) => stats.percentage < 100).slice(0, 4)

  const highlightItems = HIGHLIGHT_FIELDS.map((item) => ({
    ...item,
    field: findField(sections, item.sectionId, item.fieldId),
  }))

  const [compactMode, setCompactMode] = useState(true)
  const [showSuggestedOnly, setShowSuggestedOnly] = useState(false)

  const triggerFocusSection = useCallback(
    (sectionId: string) => {
      onFocusSection?.(sectionId)
    },
    [onFocusSection],
  )

  const triggerFocusField = useCallback(
    (sectionId: string, fieldId: string) => {
      if (onFocusField) {
        onFocusField(sectionId, fieldId)
        return
      }

      onFocusSection?.(sectionId)
    },
    [onFocusField, onFocusSection],
  )

  const tableRows = summaryRows.filter((row) => row.sectionId !== "field-notes")
  const totalsBySection = new Map<string, { total: number; index: number }>()
  tableRows.forEach((row, index) => {
    const entry = totalsBySection.get(row.sectionId)
    if (entry) {
      entry.total += 1
    } else {
      totalsBySection.set(row.sectionId, { total: 1, index })
    }
  })

  return (
    <div className={cn("flex h-full flex-col gap-4", className)}>
      <Card className="surface-subtle rounded-3xl border-none shadow-none">
        <CardHeader className="gap-4">
          <div className="space-y-2">
            <CardTitle className="flex items-center gap-2 text-lg">
              <Brain className="h-5 w-5 text-primary" />
              Technical Summary Ready for AI
            </CardTitle>
            <CardDescription>
              Capture status and derived metrics ready to share with the proposal agent.
            </CardDescription>
          </div>
          <div className="flex flex-col gap-3 md:flex-row md:items-center md:justify-between">
            <div className="flex flex-wrap items-center gap-2 text-xs text-muted-foreground">
              <span className="inline-flex items-center gap-1 rounded-full bg-muted/60 px-3 py-1 text-xs font-medium text-foreground">
                {completion.completed}/{completion.total} fields
              </span>
              <span className="inline-flex items-center gap-1 rounded-full bg-muted/40 px-3 py-1 text-xs font-medium text-foreground">
                {readinessLabel}
              </span>
              <Button
                variant="ghost"
                size="sm"
                className={cn("rounded-full px-3 text-xs", compactMode ? "text-primary" : "text-muted-foreground")}
                onClick={() => setCompactMode((prev) => !prev)}
              >
                <Sparkles className="h-4 w-4" /> Compact View
              </Button>
              <Button
                variant="ghost"
                size="sm"
                className={cn("rounded-full px-3 text-xs", showSuggestedOnly ? "text-primary" : "text-muted-foreground")}
                onClick={() => setShowSuggestedOnly((prev) => !prev)}
              >
                <ClipboardList className="h-4 w-4" /> Suggestions Only
              </Button>
            </div>
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" size="icon" className="h-9 w-9 rounded-full border border-border/60">
                  <Ellipsis className="h-4 w-4" />
                  <span className="sr-only">Open actions</span>
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end">
                <DropdownMenuItem onSelect={() => triggerFocusSection("project-context")} className="gap-2">
                  <FileText className="h-4 w-4" /> Export CSV
                </DropdownMenuItem>
                <DropdownMenuItem onSelect={() => triggerFocusSection("project-context")} className="gap-2">
                  <Copy className="h-4 w-4" /> Copy AI Payload
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        </CardHeader>
        <CardContent className="space-y-5">
          <div className="space-y-3">
            <div className="flex items-center justify-between text-sm font-medium text-foreground">
              <span>Overall Completion</span>
              <span>{completion.percentage}%</span>
            </div>
            <Progress value={completion.percentage} className="h-2" />
          </div>
          <div className="grid gap-3 sm:grid-cols-2">
            {(Object.keys(SOURCE_META) as DataSource[]).map((source) => {
              const meta = SOURCE_META[source]
              const count = sourceStats[source] ?? 0
              const Icon = meta.Icon
              return (
                <div key={source} className="rounded-2xl bg-muted/30 p-4 text-sm">
                  <div className="flex items-center gap-2 font-medium">
                    <Icon className={cn("h-4 w-4", meta.tone)} />
                    <span>{meta.label}</span>
                  </div>
                  <p className="mt-2 text-2xl font-semibold text-foreground">{count}</p>
                  <p className="text-xs text-muted-foreground">{meta.description}</p>
                </div>
              )
            })}
          </div>
          <Separator />
          <div className="grid gap-3 sm:grid-cols-3">
            <div className="rounded-2xl bg-muted/30 p-4">
              <p className="text-xs uppercase text-muted-foreground">Estimated Daily Volume</p>
              <p className="text-lg font-semibold text-foreground">{Number.isFinite(derived.dailyVolume) ? `${derived.dailyVolume.toFixed(1)} m³/day` : "–"}</p>
            </div>
            <div className="rounded-2xl bg-muted/30 p-4">
              <p className="text-xs uppercase text-muted-foreground">Per Capita Consumption</p>
              <p className="text-lg font-semibold text-foreground">{Number.isFinite(derived.perCapitaConsumption) ? `${derived.perCapitaConsumption.toFixed(1)} L/person·day` : "–"}</p>
            </div>
            <div className="rounded-2xl bg-muted/30 p-4">
              <p className="text-xs uppercase text-muted-foreground">Pending Suggestions</p>
              <p className="text-lg font-semibold text-foreground">
                {
                  sections.reduce((pending, section) =>
                    pending + section.fields.filter((field) => !field.value && field.suggestedValue !== undefined && field.suggestedValue !== null).length,
                  0)
                }
              </p>
            </div>
          </div>
        </CardContent>
      </Card>

      {!compactMode && (
        <Card className="flex-1 overflow-hidden rounded-3xl border-none bg-card/80">
          <CardHeader className="space-y-1">
            <CardTitle className="flex items-center gap-2 text-base">
              <ClipboardList className="h-4 w-4 text-primary" />
              Master Parameter Table
            </CardTitle>
            <CardDescription>
              Each row consolidates the current value, unit and source to share with engineering or export to agents.
            </CardDescription>
          </CardHeader>
          <CardContent className="p-0">
            <div className="max-h-[520px] overflow-auto">
              <Table>
                <TableHeader className="bg-muted/40">
                  <TableRow className="text-sm font-medium text-muted-foreground">
                    <TableHead className="w-[220px]">Section</TableHead>
                    <TableHead>Parameter</TableHead>
                    <TableHead className="w-[160px]">Value</TableHead>
                    <TableHead className="w-[120px]">Unit</TableHead>
                    <TableHead className="w-[120px]">Source</TableHead>
                    <TableHead>Notes</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {tableRows.length === 0 ? (
                    <TableRow>
                      <TableCell colSpan={6} className="py-12 text-center text-sm text-muted-foreground">
                        No parameters configured yet.
                      </TableCell>
                    </TableRow>
                  ) : (
                    tableRows
                      .filter((row) => {
                        if (!showSuggestedOnly) return true
                        if (row.currentValue !== undefined && row.currentValue !== null && row.currentValue !== "") return false
                        const section = sections.find((section) => section.id === row.sectionId)
                        const field = section?.fields.find((field) => field.id === row.fieldId)
                        return field?.suggestedValue !== undefined && field?.suggestedValue !== null
                      })
                      .map((row, index) => {
                        const meta = row.source ? SOURCE_META[row.source] : SOURCE_META.manual
                        const entry = totalsBySection.get(row.sectionId)
                        const showSection = entry?.index === index
                        const rowSpan = showSection ? entry?.total ?? 1 : undefined
                        return (
                          <TableRow key={`${row.sectionId}.${row.fieldId}`} className="align-top">
                            {showSection && (
                              <TableCell rowSpan={rowSpan} className="bg-muted/30 font-medium text-foreground">
                                {row.sectionTitle}
                              </TableCell>
                            )}
                            {!showSection && <TableCell className="hidden" />}
                            <TableCell className="font-medium text-foreground">{row.fieldLabel}</TableCell>
                            <TableCell className="text-foreground">{formatFieldValue({ value: row.currentValue, unit: row.unit } as TableField)}</TableCell>
                            <TableCell className="text-muted-foreground">{row.unit ?? "–"}</TableCell>
                            <TableCell>
                              <div className="inline-flex items-center gap-1 rounded-full bg-muted/60 px-2 py-1 text-xs font-medium text-muted-foreground">
                                <meta.Icon className={cn("h-3.5 w-3.5", meta.tone)} />
                                <span className="capitalize">{row.source ?? "manual"}</span>
                              </div>
                            </TableCell>
                            <TableCell className="text-xs text-muted-foreground">
                              {row.description ?? "—"}
                            </TableCell>
                          </TableRow>
                        )
                      })
                  )}
                </TableBody>
              </Table>
            </div>
          </CardContent>
        </Card>
      )}

      <Card className="rounded-3xl border-none bg-card/80">
        <CardHeader className="space-y-1">
          <CardTitle className="flex items-center gap-2 text-base">
            <AlertCircle className="h-4 w-4 text-primary" />
            Priority Sections
          </CardTitle>
          <CardDescription>
            Strengthen these blocks to reach 100% capture.
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-3 text-sm">
          {prioritySections.length === 0 ? (
            <div className="rounded-2xl border border-dashed border-muted/60 bg-muted/20 p-4 text-center text-muted-foreground">
              All up to date. Captured fields cover the current sheet.
            </div>
          ) : (
            prioritySections.map(({ section, stats }) => (
              <button
                key={section.id}
                type="button"
                onClick={() => triggerFocusSection(section.id)}
                className="flex w-full items-center justify-between rounded-2xl border border-transparent bg-muted/30 px-3 py-2 text-left transition hover:border-primary/30 focus:outline-none focus:ring-2 focus:ring-primary/30"
              >
                <div className="space-y-1">
                  <p className="font-medium text-foreground">{section.title}</p>
                  {section.description && (
                    <p className="text-xs text-muted-foreground">{section.description}</p>
                  )}
                </div>
                <div className="flex items-center gap-1 text-xs text-muted-foreground">
                  <CheckCircle2 className="h-4 w-4 text-primary" />
                  {stats.completed}/{stats.total}
                </div>
              </button>
            ))
          )}
        </CardContent>
      </Card>

      <Card className="rounded-3xl border-none bg-card/80">
        <CardHeader className="space-y-1">
          <CardTitle className="flex items-center gap-2 text-base">
            <NotebookPen className="h-4 w-4 text-primary" />
            Field Notes
          </CardTitle>
          <CardDescription>
            Critical on-site observations from the team to contextualize the solution.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <button
            type="button"
            className="min-h-[160px] w-full rounded-2xl border border-transparent bg-muted/30 p-4 text-left text-sm text-muted-foreground transition hover:border-primary/30 focus:outline-none focus:ring-2 focus:ring-primary/30"
            onClick={() => triggerFocusSection("field-notes")}
          >
            {engineerNotes ? (
              <p className="whitespace-pre-wrap text-foreground">{engineerNotes}</p>
            ) : (
              <span className="text-foreground">
                Record survey findings, risks, client agreements or relevant assumptions.
              </span>
            )}
          </button>
        </CardContent>
      </Card>
    </div>
  )
}
